---
# =============================================================================
# РЕЗЕРВНОЕ КОПИРОВАНИЕ SLURM КЛАСТЕРА
# =============================================================================

- name: "Создание директорий для резервного копирования"
  file:
    path: "{{item}}"
    state: directory
    owner: root
    group: root
    mode: "0750"
  loop:
  - "{{slurm_backup_dir | default('/var/backups/slurm')}}"
  - "{{slurm_backup_dir | default('/var/backups/slurm')}}/config"
  - "{{slurm_backup_dir | default('/var/backups/slurm')}}/database"
  - "{{slurm_backup_dir | default('/var/backups/slurm')}}/state"
  - "{{slurm_backup_dir | default('/var/backups/slurm')}}/logs"
  - "{{slurm_backup_dir | default('/var/backups/slurm')}}/scripts"
  tags: [backup, directories]

- name: "Создание основных скриптов резервного копирования"
  copy:
    content: "{{item.content}}"
    dest: "{{item.dest}}"
    owner: root
    group: root
    mode: "0755"
  loop:
  - dest: "{{slurm_install_prefix}}/bin/backup-slurm-config"
    content: |
      #!/bin/bash
      # Backup Slurm configuration
      BACKUP_DIR="${1:-{{slurm_backup_dir | default('/var/backups/slurm')}}/config}"
      DATE=$(date +%Y%m%d_%H%M%S)

      mkdir -p "$BACKUP_DIR"
      tar -czf "$BACKUP_DIR/config-$DATE.tar.gz" \
          -C {{slurm_config_dir}} .
      echo "Config backup: $BACKUP_DIR/config-$DATE.tar.gz"

  - dest: "{{slurm_install_prefix}}/bin/backup-slurm-database"
    content: |
      #!/bin/bash
      # Backup Slurm database
      BACKUP_DIR="${1:-{{slurm_backup_dir | default('/var/backups/slurm')}}/database}"
      DATE=$(date +%Y%m%d_%H%M%S)

      mkdir -p "$BACKUP_DIR"
      {% if slurm_enable_slurmdbd | default(true) %}
      mysqldump {{slurm_db_name}} > "$BACKUP_DIR/slurmdbd-$DATE.sql"
      gzip "$BACKUP_DIR/slurmdbd-$DATE.sql"
      echo "Database backup: $BACKUP_DIR/slurmdbd-$DATE.sql.gz"
      {% else %}
      echo "Database backup not enabled"
      {% endif %}

  - dest: "{{slurm_install_prefix}}/bin/backup-slurm-state"
    content: |
      #!/bin/bash
      # Backup Slurm state files
      BACKUP_DIR="${1:-{{slurm_backup_dir | default('/var/backups/slurm')}}/state}"
      DATE=$(date +%Y%m%d_%H%M%S)

      mkdir -p "$BACKUP_DIR"
      tar -czf "$BACKUP_DIR/state-$DATE.tar.gz" \
          -C {{slurm_state_save_location}} .
      echo "State backup: $BACKUP_DIR/state-$DATE.tar.gz"
  tags: [backup, scripts]

- name: "Создание основного скрипта резервного копирования"
  copy:
    content: |
      #!/bin/bash
      # Main Slurm backup script

      set -euo pipefail

      BACKUP_DIR="{{slurm_backup_dir | default('/var/backups/slurm')}}"
      DATE=$(date +%Y%m%d_%H%M%S)
      RETENTION_DAYS="{{slurm_backup_retention_days | default(30)}}"
      LOG_FILE="${BACKUP_DIR}/backup-${DATE}.log"

      log() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "${LOG_FILE}"
     }

      cleanup() {
          local exit_code=$?
          if [[$exit_code -ne 0]]; then
              log "ERROR: Backup failed with exit code $exit_code"
          else
              log "SUCCESS: Backup completed successfully"
          fi
          exit $exit_code
     }
      trap cleanup EXIT

      log "Starting Slurm backup process"

      BACKUP_SUBDIR="${BACKUP_DIR}/${DATE}"
      mkdir -p "${BACKUP_SUBDIR}"

      log "Backing up configuration files..."
      {{slurm_install_prefix}}/bin/backup-slurm-config \
          "${BACKUP_SUBDIR}/config"

      {% if slurm_enable_slurmdbd | default(true) %}
      log "Backing up database..."
      {{slurm_install_prefix}}/bin/backup-slurm-database \
          "${BACKUP_SUBDIR}/database"
      {% endif %}

      log "Backing up state files..."
      {{slurm_install_prefix}}/bin/backup-slurm-state \
          "${BACKUP_SUBDIR}/state"

      log "Creating compressed archive..."
      cd "${BACKUP_DIR}"
      tar -czf "slurm-backup-${DATE}.tar.gz" "${DATE}/"

      rm -rf "${DATE}/"

      log "Cleaning up old backups (retention: ${RETENTION_DAYS} days)..."
      find "${BACKUP_DIR}" -name "slurm-backup-*.tar.gz" \
          -type f -mtime +${RETENTION_DAYS} -delete
      find "${BACKUP_DIR}" -name "backup-*.log" \
          -type f -mtime +${RETENTION_DAYS} -delete

      BACKUP_SIZE=$(du -h "slurm-backup-${DATE}.tar.gz" | cut -f1)
      log "Backup completed: slurm-backup-${DATE}.tar.gz (${BACKUP_SIZE})"
    dest: "{{slurm_install_prefix}}/bin/backup-slurm-full"
    owner: root
    group: root
    mode: "0755"
  tags: [backup, scripts, main]

- name: "Создание скрипта восстановления"
  copy:
    content: |
      #!/bin/bash
      # Slurm restore script

      set -euo pipefail

      BACKUP_DIR="{{slurm_backup_dir | default('/var/backups/slurm')}}"
      RESTORE_TEMP="/tmp/slurm-restore-$$"

      usage() {
          echo "Usage: $0 <backup-file> [--config-only|--database-only|--state-only]"
          echo ""
          echo "Available backups:"
          ls -la "${BACKUP_DIR}"/slurm-backup-*.tar.gz 2>/dev/null || \
              echo "No backups found"
          exit 1
     }

      [[$# -lt 1]] && usage

      BACKUP_FILE="$1"
      RESTORE_TYPE="${2:-full}"

      if [[! -f "$BACKUP_FILE"]]; then
          echo "Error: Backup file not found: $BACKUP_FILE"
          exit 1
      fi

      echo "WARNING: This will restore Slurm from backup!"
      echo "Backup file: $BACKUP_FILE"
      echo "Restore type: $RESTORE_TYPE"
      echo ""
      read -p "Continue? (yes/no): " confirm

      if [["$confirm" != "yes"]]; then
          echo "Restore cancelled"
          exit 0
      fi

      mkdir -p "$RESTORE_TEMP"

      echo "Extracting backup..."
      tar -xzf "$BACKUP_FILE" -C "$RESTORE_TEMP"

      EXTRACT_DIR=$(find "$RESTORE_TEMP" -mindepth 1 -maxdepth 1 \
          -type d | head -1)

      if [[-z "$EXTRACT_DIR"]]; then
          echo "Error: Could not find extracted backup directory"
          rm -rf "$RESTORE_TEMP"
          exit 1
      fi

      echo "Stopping Slurm services..."
      systemctl stop slurmctld || true
      {% if slurm_enable_slurmdbd | default(true) %}
      systemctl stop slurmdbd || true
      {% endif %}
      {% if slurm_enable_rest_api | default(false) %}
      systemctl stop slurmrestd || true
      {% endif %}

      case "$RESTORE_TYPE" in
          "full"|"--config-only")
              echo "Restoring configuration files..."
              if [[-d "$EXTRACT_DIR/config"]]; then
                  cp -r "$EXTRACT_DIR/config"/* {{slurm_config_dir}}/
                  chown -R {{slurm_user}}:{{slurm_group}} \
                      {{slurm_config_dir}}
              fi
              ;;&

          "full"|"--state-only")
              echo "Restoring state files..."
              if [[-d "$EXTRACT_DIR/state"]]; then
                  cp -r "$EXTRACT_DIR/state"/* \
                      {{slurm_state_save_location}}/
                  chown -R {{slurm_user}}:{{slurm_group}} \
                      {{slurm_state_save_location}}
              fi
              ;;&

          "full"|"--database-only")
              {% if slurm_enable_slurmdbd | default(true) %}
              echo "Restoring database..."
              if [[-f "$EXTRACT_DIR/database/slurmdbd.sql"]]; then
                  mysql -u root -p {{slurm_db_name}} < \
                      "$EXTRACT_DIR/database/slurmdbd.sql"
              fi
              {% endif %}
              ;;
      esac

      rm -rf "$RESTORE_TEMP"

      echo "Starting Slurm services..."
      {% if slurm_enable_slurmdbd | default(true) %}
      systemctl start slurmdbd
      sleep 5
      {% endif %}
      systemctl start slurmctld
      {% if slurm_enable_rest_api | default(false) %}
      systemctl start slurmrestd
      {% endif %}

      echo "Restore completed successfully!"
      echo "Verify cluster status: {{slurm_install_prefix}}/bin/sinfo"
    dest: "{{slurm_install_prefix}}/bin/restore-slurm"
    owner: root
    group: root
    mode: "0755"
  tags: [backup, scripts, restore]

- name: "Настройка автоматического резервного копирования"
  cron:
    name: "Slurm {{item.name}} backup"
    minute: "{{item.minute | default('*')}}"
    hour: "{{item.hour | default('*')}}"
    day: "{{item.day | default('*')}}"
    month: "{{item.month | default('*')}}"
    weekday: "{{item.weekday | default('*')}}"
    user: root
    job: "{{item.job}}"
    state: "{{'present' if slurm_enable_backup | default(true) else 'absent'}}"
  loop:
- name: "configuration"
    hour: "2"
    minute: "0"
    job: "{{slurm_install_prefix}}/bin/backup-slurm-config {{slurm_backup_dir | default('/var/backups/slurm')}}/config/$(date +\\%Y\\%m\\%d)"
- name: "database"
    hour: "2"
    minute: "30"
    weekday: "0"
    job: "{{slurm_install_prefix}}/bin/backup-slurm-database {{slurm_backup_dir | default('/var/backups/slurm')}}/database/$(date +\\%Y\\%m\\%d)"
- name: "full system"
    hour: "3"
    minute: "0"
    weekday: "0"
    job: "{{slurm_install_prefix}}/bin/backup-slurm-full"
  when: item.name != "database" or slurm_enable_slurmdbd | default(true)
  tags: [backup, cron, automation]

- name: "Создание скрипта проверки резервных копий"
  copy:
    content: |
      #!/bin/bash
      # Slurm backup verification script

      BACKUP_DIR="{{slurm_backup_dir | default('/var/backups/slurm')}}"

      echo "=== Slurm Backup Status ==="
      echo "Backup directory: $BACKUP_DIR"
      echo ""

      if [[! -d "$BACKUP_DIR"]]; then
          echo "ERROR: Backup directory does not exist!"
          exit 1
      fi

      echo "Recent backups:"
      find "$BACKUP_DIR" -name "slurm-backup-*.tar.gz" \
          -type f -mtime -7 -exec ls -lh {} \; | sort -k9
      echo ""

      LATEST_BACKUP=$(find "$BACKUP_DIR" -name "slurm-backup-*.tar.gz" \
          -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)

      if [[-n "$LATEST_BACKUP"]]; then
          BACKUP_AGE_DAYS=$(( ($(date +%s) - $(stat -c %Y "$LATEST_BACKUP")) / 86400 ))
          echo "Latest backup: $(basename "$LATEST_BACKUP")"
          echo "Age: $BACKUP_AGE_DAYS days"

          if [[$BACKUP_AGE_DAYS -gt 7]]; then
              echo "WARNING: Latest backup is older than 7 days!"
          fi
      else
          echo "WARNING: No backups found!"
      fi

      echo ""

      if [[-n "$LATEST_BACKUP"]]; then
          echo "Verifying latest backup integrity..."
          if tar -tzf "$LATEST_BACKUP" >/dev/null 2>&1; then
              echo "✓ Backup archive is valid"
          else
              echo "✗ Backup archive is corrupted!"
              exit 1
          fi
      fi

      echo ""
      echo "Backup directory disk usage:"
      du -sh "$BACKUP_DIR"

      USED_PERCENT=$(df "$BACKUP_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')

      if [[$USED_PERCENT -gt 90]]; then
          echo "WARNING: Backup partition is ${USED_PERCENT}% full!"
      fi

      echo ""
      echo "Backup status check completed."
    dest: "{{slurm_install_prefix}}/bin/check-slurm-backups"
    owner: root
    group: root
    mode: "0755"
  tags: [backup, scripts, verification]

- name: "Настройка мониторинга резервных копий"
  cron:
    name: "Check Slurm backups"
    minute: "0"
    hour: "8"
    user: root
    job: "{{slurm_install_prefix}}/bin/check-slurm-backups"
    state: "{{'present' if slurm_enable_backup_monitoring | default(true) else 'absent'}}"
  tags: [backup, monitoring, cron]

- name: "Первоначальное резервное копирование"
  command: "{{slurm_install_prefix}}/bin/backup-slurm-full"
  when: slurm_create_initial_backup | default(true)
  tags: [backup, initial]

- name: "Проверка созданных резервных копий"
  command: "{{slurm_install_prefix}}/bin/check-slurm-backups"
  register: backup_check
  when: slurm_create_initial_backup | default(true)
  tags: [backup, verification]

- name: "Отображение статуса резервного копирования"
  debug:
    msg: |
      ================================================================
      РЕЗЕРВНОЕ КОПИРОВАНИЕ SLURM НАСТРОЕНО
      ================================================================

      Доступные команды:
      - Полное резервное копирование: {{slurm_install_prefix}}/bin/backup-slurm-full
      - Копирование конфигурации: {{slurm_install_prefix}}/bin/backup-slurm-config
      {% if slurm_enable_slurmdbd | default(true) %}
      - Копирование базы данных: {{slurm_install_prefix}}/bin/backup-slurm-database
      {% endif %}
      - Копирование состояния: {{slurm_install_prefix}}/bin/backup-slurm-state
      - Восстановление: {{slurm_install_prefix}}/bin/restore-slurm
      - Проверка резервных копий: {{slurm_install_prefix}}/bin/check-slurm-backups

      Расположение резервных копий: {{slurm_backup_dir | default('/var/backups/slurm')}}
      Период хранения: {{slurm_backup_retention_days | default(30)}} дней

      Автоматическое расписание:
      - Конфигурация: ежедневно в 02:00
      {% if slurm_enable_slurmdbd | default(true) %}
      - База данных: еженедельно в воскресенье в 02:30
      {% endif %}
      - Полная копия: еженедельно в воскресенье в 03:00

      Документация: {{slurm_config_dir}}/backup-restore-guide.md
      ================================================================
  tags: [backup, summary]
