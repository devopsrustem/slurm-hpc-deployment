---
# =============================================================================
# ВАЛИДАЦИЯ SLURM КЛАСТЕРА
# =============================================================================

- name: "Проверка установки Slurm"
  block:
- name: "Проверка установленной версии Slurm"
    command: "{{slurm_install_prefix}}/bin/sinfo --version"
    register: slurm_version_check
    changed_when: false

- name: "Проверка соответствия версии"
    assert:
      that:
      - slurm_version | default('25.05.1') in slurm_version_check.stdout
      fail_msg: |
        Версия Slurm не соответствует ожидаемой!
        Ожидается: {{slurm_version | default('25.05.1')}}
        Установлена: {{slurm_version_check.stdout}}
      success_msg: "Версия Slurm корректна: {{slurm_version_check.stdout}}"

- name: "Проверка доступности команд Slurm"
    command: "{{item}} --version"
    register: slurm_commands
    failed_when: slurm_commands.rc != 0
    changed_when: false
    loop:
    - "{{slurm_install_prefix}}/bin/sinfo"
    - "{{slurm_install_prefix}}/bin/squeue"
    - "{{slurm_install_prefix}}/bin/scontrol"
    - "{{slurm_install_prefix}}/bin/sacct"
    - "{{slurm_install_prefix}}/bin/sacctmgr"
    - "{{slurm_install_prefix}}/bin/sbatch"
    - "{{slurm_install_prefix}}/bin/srun"

  tags: [validation, installation]

- name: "Проверка конфигурационных файлов"
  block:
- name: "Проверка существования основных конфигурационных файлов"
    stat:
      path: "{{item}}"
    register: config_files
    failed_when: not config_files.stat.exists
    loop:
    - "{{slurm_config_dir}}/slurm.conf"
    - "{{slurm_config_dir}}/gres.conf"
    - "{{slurm_config_dir}}/cgroup.conf"
    - "{{slurm_config_dir}}/slurmdbd.conf"

- name: "Проверка синтаксиса конфигурации Slurm"
    command: >
      {{slurm_install_prefix}}/sbin/slurmctld  -D -t
    register: slurm_config_test
    failed_when: slurm_config_test.rc != 0
    changed_when: false

- name: "Проверка прав доступа к конфигурационным файлам"
    stat:
      path: "{{item.path}}"
    register: config_permissions
    failed_when:
    - config_permissions.stat.pw_name != item.owner
    - config_permissions.stat.gr_name != item.group
    loop:
    - {path: "{{slurm_config_dir}}/slurm.conf", owner: "{{slurm_user}}", group: "{{slurm_group}}"}
    - {path: "{{slurm_config_dir}}/slurmdbd.conf", owner: "{{slurm_user}}", group: "{{slurm_group}}"}

  tags: [validation, configuration]

- name: "Проверка сетевых соединений"
  block:
- name: "Проверка доступности портов Slurm"
    wait_for:
      host: "{{slurm_master_address}}"
      port: "{{item}}"
      timeout: 10
    loop:
    - "{{slurm_slurmctld_port}}"
    - "{{slurm_slurmdbd_port}}"
    - "{{slurm_slurmrestd_port if slurm_enable_rest_api | default(false) else omit}}"
    when: item != omit

- name: "Проверка разрешения имен узлов"
    command: "getent hosts {{item}}"
    register: hostname_resolution
    failed_when: hostname_resolution.rc != 0
    changed_when: false
    loop: "{{slurm_all_nodes | default([slurm_master_node])}}"

- name: "Проверка связности с compute узлами"
    command: "ping -c 1 -W 5 {{item}}"
    register: node_ping
    failed_when: node_ping.rc != 0
    changed_when: false
    loop: "{{slurm_compute_nodes | default([])}}"
    when: slurm_compute_nodes is defined

  tags: [validation, network]

- name: "Проверка сервисов и процессов"
  block:
- name: "Проверка статуса systemd сервисов"
    systemd:
      name: "{{item}}"
    register: service_status
    failed_when: service_status.status.ActiveState != 'active'
    loop:
    - munge
    - slurmctld
    - "{{'slurmdbd' if slurm_enable_slurmdbd | default(true) else omit}}"
    - "{{'slurmrestd' if slurm_enable_rest_api | default(false) else omit}}"
    when: item != omit

- name: "Проверка процессов Slurm"
    command: "pgrep -f {{item}}"
    register: process_check
    failed_when: process_check.rc != 0
    changed_when: false
    loop:
    - slurmctld
    - "{{'slurmdbd' if slurm_enable_slurmdbd | default(true) else omit}}"
    - "{{'slurmrestd' if slurm_enable_rest_api | default(false) else omit}}"
    when: item != omit

- name: "Проверка файлов PID"
    stat:
      path: "{{item}}"
    register: pid_files
    failed_when: not pid_files.stat.exists
    loop:
    - "{{slurm_slurmctld_pid_file}}"
    - "{{slurm_slurmdbd_pid_file if slurm_enable_slurmdbd | default(true) else omit}}"
    when: item != omit

  tags: [validation, services]

- name: "Проверка базы данных"
  block:
- name: "Проверка подключения к MySQL"
    command: >
      mysql -h {{slurm_db_host | default('localhost')}} -P {{slurm_db_port | default(3306)}} -u {{slurm_db_user}} -p{{slurm_db_password}} -e "SELECT 1"
    register: mysql_connection
    failed_when: mysql_connection.rc != 0
    changed_when: false
    no_log: true

- name: "Проверка базы данных Slurm"
    command: >
      mysql -h {{slurm_db_host | default('localhost')}} -P {{slurm_db_port | default(3306)}} -u {{slurm_db_user}} -p{{slurm_db_password}} -D {{slurm_db_name}} -e "SHOW TABLES"
    register: slurm_db_tables
    failed_when: slurm_db_tables.rc != 0
    changed_when: false
    no_log: true

- name: "Проверка кластера в базе данных"
    command: >
      {{slurm_install_prefix}}/bin/sacctmgr  -n -p list cluster {{slurm_cluster_name}}
    register: cluster_in_db
    failed_when: cluster_in_db.stdout == ""
    changed_when: false

  when: slurm_enable_slurmdbd | default(true)
  tags: [validation, database]

- name: "Проверка аутентификации"
  block:
- name: "Проверка MUNGE аутентификации"
    command: "munge -n | unmunge"
    register: munge_test
    failed_when: munge_test.rc != 0
    changed_when: false

- name: "Проверка JWT аутентификации"
    block:
    - name: "Проверка существования JWT ключа"
      stat:
        path: "{{slurm_jwt_key_file}}"
      register: jwt_key_file
      failed_when: not jwt_key_file.stat.exists

    - name: "Проверка JWT генератора"
      command: "{{slurm_install_prefix}}/bin/slurm-jwt-generator --username testuser --lifetime 60"
      register: jwt_test
      failed_when: jwt_test.rc != 0
      changed_when: false

    when: slurm_enable_jwt_auth | default(false)

  tags: [validation, authentication]

- name: "Проверка узлов кластера"
  block:
- name: "Проверка состояния узлов"
    command: "{{slurm_install_prefix}}/bin/sinfo -N -h -o '%N %T'"
    register: nodes_state
    changed_when: false

- name: "Анализ состояния узлов"
    set_fact:
      nodes_summary: "{{nodes_state.stdout_lines | map('split') | list}}"

- name: "Проверка наличия рабочих узлов"
    assert:
      that:
      - nodes_summary | selectattr('1', 'match', '^(idle|alloc|mix|comp)$') | list | length > 0
      fail_msg: |
        Нет узлов в рабочем состоянии!
        Текущее состояние узлов:
        {{nodes_state.stdout_lines | join('\n')}}
      success_msg: "Обнаружены рабочие узлы"

- name: "Проверка GRES ресурсов"
    command: "{{slurm_install_prefix}}/bin/sinfo -o '%N %G'"
    register: gres_check
    changed_when: false
    when: slurm_enable_gres | default(true)

- name: "Отображение GRES ресурсов"
    debug:
      msg: |
        GRES ресурсы на узлах:
        {{gres_check.stdout_lines | join('\n')}}
    when:
    - slurm_enable_gres | default(true)
    - gres_check is defined

  tags: [validation, nodes]

- name: "Проверка REST API"
  block:
- name: "Проверка доступности REST API"
    uri:
      url: "{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_address}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/ping"
      method: GET
      validate_certs: false
      timeout: 10
    register: rest_api_ping
    failed_when: rest_api_ping.status != 200

- name: "Проверка версии REST API"
    uri:
      url: "{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_address}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/diag"
      method: GET
      validate_certs: false
      timeout: 10
    register: rest_api_version
    failed_when: rest_api_version.status != 200

  when: slurm_enable_rest_api | default(false)
  tags: [validation, rest-api]

- name: "Функциональные тесты"
  block:
- name: "Создание тестового задания"
    copy:
      content: |
        #!/bin/bash
        #SBATCH --job-name=validation-test
        #SBATCH --output={{slurm_log_dir}}/validation-test-%j.out
        #SBATCH --error={{slurm_log_dir}}/validation-test-%j.err
        #SBATCH --time=00:02:00
        #SBATCH --ntasks=1
        #SBATCH --cpus-per-task=1

        echo "Validation test started: $(date)"
        hostname
        echo "Slurm job ID: $SLURM_JOB_ID"
        sleep 10
        echo "Validation test completed: $(date)"
      dest: "/tmp/validation-test.sh"
      mode: "0755"

- name: "Запуск тестового задания"
    command: "{{slurm_install_prefix}}/bin/sbatch /tmp/validation-test.sh"
    register: test_job_submit
    become_user: "{{slurm_user}}"

- name: "Получение ID тестового задания"
    set_fact:
      test_job_id: "{{test_job_submit.stdout | regex_search('\\d+')}}"

- name: "Ожидание запуска задания"
    command: "{{slurm_install_prefix}}/bin/squeue -j {{test_job_id}} -h -o '%T'"
    register: job_status
    retries: 30
    delay: 10
    until: job_status.stdout != 'PENDING'
    failed_when: job_status.stdout == ''

- name: "Ожидание завершения задания"
    command: "{{slurm_install_prefix}}/bin/squeue -j {{test_job_id}} -h -o '%T'"
    register: job_completion
    retries: 20
    delay: 10
    until: job_completion.stdout == '' or 'COMPLETED' in job_completion.stdout

- name: "Проверка результатов задания"
    command: "{{slurm_install_prefix}}/bin/sacct -j {{test_job_id}} -o JobID,State,ExitCode -n"
    register: job_results

- name: "Анализ результатов задания"
    assert:
      that:
      - "'COMPLETED' in job_results.stdout"
      - "'0:0' in job_results.stdout"
      fail_msg: |
        Тестовое задание не завершилось успешно!
        Результаты: {{job_results.stdout}}
      success_msg: "Тестовое задание выполнено успешно"

- name: "Очистка тестовых файлов"
    file:
      path: "{{item}}"
      state: absent
    loop:
    - "/tmp/validation-test.sh"
    - "{{slurm_log_dir}}/validation-test-{{test_job_id}}.out"
    - "{{slurm_log_dir}}/validation-test-{{test_job_id}}.err"

  when: slurm_run_functional_tests | default(true)
  tags: [validation, functional-tests]

- name: "Проверка производительности"
  block:
- name: "Тест пропускной способности scheduler"
    command: >
      {{slurm_install_prefix}}/bin/sbatch  --array=1-10 --wrap="sleep 5"
    register: array_job_submit
    become_user: "{{slurm_user}}"

- name: "Получение ID массового задания"
    set_fact:
      array_job_id: "{{array_job_submit.stdout | regex_search('\\d+')}}"

- name: "Мониторинг выполнения массового задания"
    command: "{{slurm_install_prefix}}/bin/squeue -j {{array_job_id}} -h | wc -l"
    register: running_jobs
    retries: 30
    delay: 5
    until: running_jobs.stdout | int == 0

- name: "Проверка времени выполнения массового задания"
    command: >
      {{slurm_install_prefix}}/bin/sacct  -j {{array_job_id}}  -o JobID,Start,End,Elapsed  -n
    register: performance_results

  when: slurm_run_performance_tests | default(false)
  tags: [validation, performance]

- name: "Генерация отчета валидации"
  block:
- name: "Сбор системной информации"
    command: "{{item.cmd}}"
    register: system_info
    failed_when: false
    changed_when: false
    loop:
    - {name: "slurm_version", cmd: "{{slurm_install_prefix}}/bin/sinfo --version"}
    - {name: "cluster_info", cmd: "{{slurm_install_prefix}}/bin/sinfo"}
    - {name: "node_details", cmd: "{{slurm_install_prefix}}/bin/scontrol show nodes"}
    - {name: "partition_info", cmd: "{{slurm_install_prefix}}/bin/scontrol show partitions"}

- name: "Создание отчета валидации"
    template:
      src: validation-report.j2
      dest: "{{slurm_config_dir}}/validation-report-{{ansible_date_time.date}}.txt"
      owner: "{{slurm_user}}"
      group: "{{slurm_group}}"
      mode: "0644"

- name: "Отображение результатов валидации"
    debug:
      msg: |
        ================================================================
        РЕЗУЛЬТАТЫ ВАЛИДАЦИИ SLURM КЛАСТЕРА
        ================================================================

        ✅ Установка: УСПЕШНО
        ✅ Конфигурация: УСПЕШНО
        ✅ Сетевые соединения: УСПЕШНО
        ✅ Сервисы: УСПЕШНО
        {% if slurm_enable_slurmdbd | default(true) %}
        ✅ База данных: УСПЕШНО
        {% endif %}
        ✅ Аутентификация: УСПЕШНО
        ✅ Узлы кластера: УСПЕШНО
        {% if slurm_enable_rest_api | default(false) %}
        ✅ REST API: УСПЕШНО
        {% endif %}
        {% if slurm_run_functional_tests | default(true) %}
        ✅ Функциональные тесты: УСПЕШНО
        {% endif %}

        Кластер {{slurm_cluster_name}} прошел все проверки!

        Отчет сохранен: {{slurm_config_dir}}/validation-report-{{ansible_date_time.date}}.txt
        ================================================================

  tags: [validation, reporting]

- name: "Создание файла статуса валидации"
  copy:
    content: |
      Cluster: {{slurm_cluster_name}}
      Validated: {{ansible_date_time.iso8601}}
      Version: {{slurm_version | default('25.05.1')}}
      Status: VALIDATED
      All tests: PASSED
    dest: "{{slurm_config_dir}}/cluster-validated"
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: "0644"
  tags: [validation, status]
# =============================================================================
# ВАЛИДАЦИЯ SLURM КЛАСТЕРА
# =============================================================================

- name: "Проверка установки Slurm"
  block:
- name: "Проверка установленной версии Slurm"
    command: "{{slurm_install_prefix}}/bin/sinfo --version"
    register: slurm_version_check
    changed_when: false

- name: "Проверка соответствия версии"
    assert:
      that:
      - slurm_version | default('25.05.1') in slurm_version_check.stdout
      fail_msg: |
        Версия Slurm не соответствует ожидаемой!
        Ожидается: {{slurm_version | default('25.05.1')}}
        Установлена: {{slurm_version_check.stdout}}
      success_msg: "Версия Slurm корректна: {{slurm_version_check.stdout}}"

- name: "Проверка доступности команд Slurm"
    command: "{{item}} --version"
    register: slurm_commands
    failed_when: slurm_commands.rc != 0
    changed_when: false
    loop:
    - "{{slurm_install_prefix}}/bin/sinfo"
    - "{{slurm_install_prefix}}/bin/squeue"
    - "{{slurm_install_prefix}}/bin/scontrol"
    - "{{slurm_install_prefix}}/bin/sacct"
    - "{{slurm_install_prefix}}/bin/sacctmgr"
    - "{{slurm_install_prefix}}/bin/sbatch"
    - "{{slurm_install_prefix}}/bin/srun"

  tags: [validation, installation]

- name: "Проверка конфигурационных файлов"
  block:
- name: "Проверка существования основных конфигурационных файлов"
    stat:
      path: "{{item}}"
    register: config_files
    failed_when: not config_files.stat.exists
    loop:
    - "{{slurm_config_dir}}/slurm.conf"
    - "{{slurm_config_dir}}/gres.conf"
    - "{{slurm_config_dir}}/cgroup.conf"
    - "{{slurm_config_dir}}/slurmdbd.conf"

- name: "Проверка синтаксиса конфигурации Slurm"
    command: >
      {{slurm_install_prefix}}/sbin/slurmctld  -D -t
    register: slurm_config_test
    failed_when: slurm_config_test.rc != 0
    changed_when: false

- name: "Проверка прав доступа к конфигурационным файлам"
    stat:
      path: "{{item.path}}"
    register: config_permissions
    failed_when:
    - config_permissions.stat.pw_name != item.owner
    - config_permissions.stat.gr_name != item.group
    loop:
    - {path: "{{slurm_config_dir}}/slurm.conf", owner: "{{slurm_user}}", group: "{{slurm_group}}"}
    - {path: "{{slurm_config_dir}}/slurmdbd.conf", owner: "{{slurm_user}}", group: "{{slurm_group}}"}

  tags: [validation, configuration]

- name: "Проверка сетевых соединений"
  block:
- name: "Проверка доступности портов Slurm"
    wait_for:
      host: "{{slurm_master_address}}"
      port: "{{item}}"
      timeout: 10
    loop:
    - "{{slurm_slurmctld_port}}"
    - "{{slurm_slurmdbd_port}}"
    - "{{slurm_slurmrestd_port if slurm_enable_rest_api | default(false) else omit}}"
    when: item != omit

- name: "Проверка разрешения имен узлов"
    command: "getent hosts {{item}}"
    register: hostname_resolution
    failed_when: hostname_resolution.rc != 0
    changed_when: false
    loop: "{{slurm_all_nodes | default([slurm_master_node])}}"

- name: "Проверка связности с compute узлами"
    command: "ping -c 1 -W 5 {{item}}"
    register: node_ping
    failed_when: node_ping.rc != 0
    changed_when: false
    loop: "{{slurm_compute_nodes | default([])}}"
    when: slurm_compute_nodes is defined

  tags: [validation, network]

- name: "Проверка сервисов и процессов"
  block:
- name: "Проверка статуса systemd сервисов"
    systemd:
      name: "{{item}}"
    register: service_status
    failed_when: service_status.status.ActiveState != 'active'
    loop:
    - munge
    - slurmctld
    - "{{'slurmdbd' if slurm_enable_slurmdbd | default(true) else omit}}"
    - "{{'slurmrestd' if slurm_enable_rest_api | default(false) else omit}}"
    when: item != omit

- name: "Проверка процессов Slurm"
    command: "pgrep -f {{item}}"
    register: process_check
    failed_when: process_check.rc != 0
    changed_when: false
    loop:
    - slurmctld
    - "{{'slurmdbd' if slurm_enable_slurmdbd | default(true) else omit}}"
    - "{{'slurmrestd' if slurm_enable_rest_api | default(false) else omit}}"
    when: item != omit

- name: "Проверка файлов PID"
    stat:
      path: "{{item}}"
    register: pid_files
    failed_when: not pid_files.stat.exists
    loop:
    - "{{slurm_slurmctld_pid_file}}"
    - "{{slurm_slurmdbd_pid_file if slurm_enable_slurmdbd | default(true) else omit}}"
    when: item != omit

  tags: [validation, services]

- name: "Проверка базы данных"
  block:
- name: "Проверка подключения к MySQL"
    command: >
      mysql -h {{slurm_db_host | default('localhost')}} -P {{slurm_db_port | default(3306)}} -u {{slurm_db_user}} -p{{slurm_db_password}} -e "SELECT 1"
    register: mysql_connection
    failed_when: mysql_connection.rc != 0
    changed_when: false
    no_log: true

- name: "Проверка базы данных Slurm"
    command: >
      mysql -h {{slurm_db_host | default('localhost')}} -P {{slurm_db_port | default(3306)}} -u {{slurm_db_user}} -p{{slurm_db_password}} -D {{slurm_db_name}} -e "SHOW TABLES"
    register: slurm_db_tables
    failed_when: slurm_db_tables.rc != 0
    changed_when: false
    no_log: true

- name: "Проверка кластера в базе данных"
    command: >
      {{slurm_install_prefix}}/bin/sacctmgr  -n -p list cluster {{slurm_cluster_name}}
    register: cluster_in_db
    failed_when: cluster_in_db.stdout == ""
    changed_when: false

  when: slurm_enable_slurmdbd | default(true)
  tags: [validation, database]

- name: "Проверка аутентификации"
  block:
- name: "Проверка MUNGE аутентификации"
    command: "munge -n | unmunge"
    register: munge_test
    failed_when: munge_test.rc != 0
    changed_when: false

- name: "Проверка JWT аутентификации"
    block:
    - name: "Проверка существования JWT ключа"
      stat:
        path: "{{slurm_jwt_key_file}}"
      register: jwt_key_file
      failed_when: not jwt_key_file.stat.exists

    - name: "Проверка JWT генератора"
      command: "{{slurm_install_prefix}}/bin/slurm-jwt-generator --username testuser --lifetime 60"
      register: jwt_test
      failed_when: jwt_test.rc != 0
      changed_when: false

    when: slurm_enable_jwt_auth | default(false)

  tags: [validation, authentication]

- name: "Проверка узлов кластера"
  block:
- name: "Проверка состояния узлов"
    command: "{{slurm_install_prefix}}/bin/sinfo -N -h -o '%N %T'"
    register: nodes_state
    changed_when: false

- name: "Анализ состояния узлов"
    set_fact:
      nodes_summary: "{{nodes_state.stdout_lines | map('split') | list}}"

- name: "Проверка наличия рабочих узлов"
    assert:
      that:
      - nodes_summary | selectattr('1', 'match', '^(idle|alloc|mix|comp)$') | list | length > 0
      fail_msg: |
        Нет узлов в рабочем состоянии!
        Текущее состояние узлов:
        {{nodes_state.stdout_lines | join('\n')}}
      success_msg: "Обнаружены рабочие узлы"

- name: "Проверка GRES ресурсов"
    command: "{{slurm_install_prefix}}/bin/sinfo -o '%N %G'"
    register: gres_check
    changed_when: false
    when: slurm_enable_gres | default(true)

- name: "Отображение GRES ресурсов"
    debug:
      msg: |
        GRES ресурсы на узлах:
        {{gres_check.stdout_lines | join('\n')}}
    when:
    - slurm_enable_gres | default(true)
    - gres_check is defined

  tags: [validation, nodes]

- name: "Проверка REST API"
  block:
- name: "Проверка доступности REST API"
    uri:
      url: "{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_address}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/ping"
      method: GET
      validate_certs: false
      timeout: 10
    register: rest_api_ping
    failed_when: rest_api_ping.status != 200

- name: "Проверка версии REST API"
    uri:
      url: "{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_address}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/diag"
      method: GET
      validate_certs: false
      timeout: 10
    register: rest_api_version
    failed_when: rest_api_version.status != 200

  when: slurm_enable_rest_api | default(false)
  tags: [validation, rest-api]

- name: "Функциональные тесты"
  block:
- name: "Создание тестового задания"
    copy:
      content: |
        #!/bin/bash
        #SBATCH --job-name=validation-test
        #SBATCH --output={{slurm_log_dir}}/validation-test-%j.out
        #SBATCH --error={{slurm_log_dir}}/validation-test-%j.err
        #SBATCH --time=00:02:00
        #SBATCH --ntasks=1
        #SBATCH --cpus-per-task=1

        echo "Validation test started: $(date)"
        hostname
        echo "Slurm job ID: $SLURM_JOB_ID"
        sleep 10
        echo "Validation test completed: $(date)"
      dest: "/tmp/validation-test.sh"
      mode: "0755"

- name: "Запуск тестового задания"
    command: "{{slurm_install_prefix}}/bin/sbatch /tmp/validation-test.sh"
    register: test_job_submit
    become_user: "{{slurm_user}}"

- name: "Получение ID тестового задания"
    set_fact:
      test_job_id: "{{test_job_submit.stdout | regex_search('\\d+')}}"

- name: "Ожидание запуска задания"
    command: "{{slurm_install_prefix}}/bin/squeue -j {{test_job_id}} -h -o '%T'"
    register: job_status
    retries: 30
    delay: 10
    until: job_status.stdout != 'PENDING'
    failed_when: job_status.stdout == ''

- name: "Ожидание завершения задания"
    command: "{{slurm_install_prefix}}/bin/squeue -j {{test_job_id}} -h -o '%T'"
    register: job_completion
    retries: 20
    delay: 10
    until: job_completion.stdout == '' or 'COMPLETED' in job_completion.stdout

- name: "Проверка результатов задания"
    command: "{{slurm_install_prefix}}/bin/sacct -j {{test_job_id}} -o JobID,State,ExitCode -n"
    register: job_results

- name: "Анализ результатов задания"
    assert:
      that:
      - "'COMPLETED' in job_results.stdout"
      - "'0:0' in job_results.stdout"
      fail_msg: |
        Тестовое задание не завершилось успешно!
        Результаты: {{job_results.stdout}}
      success_msg: "Тестовое задание выполнено успешно"

- name: "Очистка тестовых файлов"
    file:
      path: "{{item}}"
      state: absent
    loop:
    - "/tmp/validation-test.sh"
    - "{{slurm_log_dir}}/validation-test-{{test_job_id}}.out"
    - "{{slurm_log_dir}}/validation-test-{{test_job_id}}.err"

  when: slurm_run_functional_tests | default(true)
  tags: [validation, functional-tests]

- name: "Проверка производительности"
  block:
- name: "Тест пропускной способности scheduler"
    command: >
      {{slurm_install_prefix}}/bin/sbatch  --array=1-10 --wrap="sleep 5"
    register: array_job_submit
    become_user: "{{slurm_user}}"

- name: "Получение ID массового задания"
    set_fact:
      array_job_id: "{{array_job_submit.stdout | regex_search('\\d+')}}"

- name: "Мониторинг выполнения массового задания"
    command: "{{slurm_install_prefix}}/bin/squeue -j {{array_job_id}} -h | wc -l"
    register: running_jobs
    retries: 30
    delay: 5
    until: running_jobs.stdout | int == 0

- name: "Проверка времени выполнения массового задания"
    command: >
      {{slurm_install_prefix}}/bin/sacct  -j {{array_job_id}}  -o JobID,Start,End,Elapsed  -n
    register: performance_results

  when: slurm_run_performance_tests | default(false)
  tags: [validation, performance]

- name: "Генерация отчета валидации"
  block:
- name: "Сбор системной информации"
    command: "{{item.cmd}}"
    register: system_info
    failed_when: false
    changed_when: false
    loop:
    - {name: "slurm_version", cmd: "{{slurm_install_prefix}}/bin/sinfo --version"}
    - {name: "cluster_info", cmd: "{{slurm_install_prefix}}/bin/sinfo"}
    - {name: "node_details", cmd: "{{slurm_install_prefix}}/bin/scontrol show nodes"}
    - {name: "partition_info", cmd: "{{slurm_install_prefix}}/bin/scontrol show partitions"}

- name: "Создание отчета валидации"
    copy:
      content: |
        ================================================================
        SLURM CLUSTER VALIDATION REPORT
        ================================================================

        Generated: {{ansible_date_time.iso8601}}
        Cluster: {{slurm_cluster_name}}

        System Information:
        {{system_info.results[0].stdout | default('N/A')}}

        Cluster Status:
        {{system_info.results[1].stdout_lines | default(['N/A']) | join('\n')}}

        Validation Results:
        ✅ Installation: PASSED
        ✅ Configuration: PASSED
        ✅ Network: PASSED
        ✅ Services: PASSED
        {% if slurm_enable_slurmdbd | default(true) %}
        ✅ Database: PASSED
        {% endif %}
        ✅ Authentication: PASSED
        ✅ Nodes: PASSED
        {% if slurm_enable_rest_api | default(false) %}
        ✅ REST API: PASSED
        {% endif %}

        All validation tests completed successfully!
        ================================================================
      dest: "{{slurm_config_dir}}/validation-report-{{ansible_date_time.date}}.txt"
      owner: "{{slurm_user}}"
      group: "{{slurm_group}}"
      mode: "0644"

- name: "Отображение результатов валидации"
    debug:
      msg: |
        ================================================================
        РЕЗУЛЬТАТЫ ВАЛИДАЦИИ SLURM КЛАСТЕРА
        ================================================================

        ✅ Установка: УСПЕШНО
        ✅ Конфигурация: УСПЕШНО
        ✅ Сетевые соединения: УСПЕШНО
        ✅ Сервисы: УСПЕШНО
        {% if slurm_enable_slurmdbd | default(true) %}
        ✅ База данных: УСПЕШНО
        {% endif %}
        ✅ Аутентификация: УСПЕШНО
        ✅ Узлы кластера: УСПЕШНО
        {% if slurm_enable_rest_api | default(false) %}
        ✅ REST API: УСПЕШНО
        {% endif %}
        {% if slurm_run_functional_tests | default(true) %}
        ✅ Функциональные тесты: УСПЕШНО
        {% endif %}

        Кластер {{slurm_cluster_name}} прошел все проверки!

        Отчет сохранен: {{slurm_config_dir}}/validation-report-{{ansible_date_time.date}}.txt
        ================================================================

  tags: [validation, reporting]

- name: "Создание файла статуса валидации"
  copy:
    content: |
      Cluster: {{slurm_cluster_name}}
      Validated: {{ansible_date_time.iso8601}}
      Version: {{slurm_version | default('25.05.1')}}
      Status: VALIDATED
      All tests: PASSED
    dest: "{{slurm_config_dir}}/cluster-validated"
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: "0644"
  tags: [validation, status]
