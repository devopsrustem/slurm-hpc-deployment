#!/usr/bin/env python3
# =============================================================================
# SLURM JWT TOKEN GENERATOR - GENERATED BY ANSIBLE
# =============================================================================
#
# jwt_generator.py - JWT Token Generator for Slurm Authentication
# Generated automatically by Ansible - DO NOT EDIT MANUALLY
#
# This script generates JWT tokens for Slurm REST API authentication
# =============================================================================

import os
import sys
import json
import time
import base64
import hmac
import hashlib
import argparse
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

# =============================================================================
# CONFIGURATION
# =============================================================================

SLURM_CONFIG = {
    'cluster_name': '{{ slurm_cluster_name }}',
    'jwt_key_file': '{{ slurm_jwt_key_file }}',
    'jwks_file': '{{ slurm_config_dir }}/slurm.jwks',
    'algorithm': '{{ slurm_jwt_algorithm | default("HS256") }}',
    'issuer': '{{ slurm_jwt_issuer | default("slurm-cluster-" + slurm_cluster_name) }}',
    'audience': '{{ slurm_jwt_audience | default("slurm-users") }}',
    'default_lifetime': {{ slurm_jwt_token_lifetime | default(3600) }},
    'max_lifetime': {{ slurm_jwt_max_lifetime | default(86400) }},
    'clock_skew': {{ slurm_jwt_clock_skew | default(300) }}
}

# =============================================================================
# JWT HELPER FUNCTIONS
# =============================================================================

def base64url_encode(data: bytes) -> str:
    """Encode data using base64url encoding (without padding)."""
    return base64.urlsafe_b64encode(data).decode('utf-8').rstrip('=')

def base64url_decode(data: str) -> bytes:
    """Decode base64url encoded data."""
    # Add padding if necessary
    padding = 4 - len(data) % 4
    if padding != 4:
        data += '=' * padding
    return base64.urlsafe_b64decode(data)

def load_secret_key() -> str:
    """Load the JWT secret key from file."""
    try:
        with open(SLURM_CONFIG['jwt_key_file'], 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        raise Exception(f"JWT key file not found: {SLURM_CONFIG['jwt_key_file']}")
    except PermissionError:
        raise Exception(f"Permission denied reading JWT key file: {SLURM_CONFIG['jwt_key_file']}")

def load_jwks() -> Dict[str, Any]:
    """Load JWKS configuration."""
    try:
        with open(SLURM_CONFIG['jwks_file'], 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Warning: JWKS file not found: {SLURM_CONFIG['jwks_file']}")
        return {}
    except json.JSONDecodeError:
        raise Exception(f"Invalid JSON in JWKS file: {SLURM_CONFIG['jwks_file']}")

# =============================================================================
# JWT TOKEN GENERATOR
# =============================================================================

class SlurmJWTGenerator:
    """JWT token generator for Slurm authentication."""
    
    def __init__(self):
        self.secret_key = load_secret_key()
        self.jwks = load_jwks()
        
    def create_header(self, algorithm: str = None, key_id: str = None) -> Dict[str, Any]:
        """Create JWT header."""
        header = {
            'typ': 'JWT',
            'alg': algorithm or SLURM_CONFIG['algorithm']
        }
        
        if key_id:
            header['kid'] = key_id
            
        return header
    
    def create_payload(self, username: str, **kwargs) -> Dict[str, Any]:
        """Create JWT payload with claims."""
        now = int(time.time())
        lifetime = kwargs.get('lifetime', SLURM_CONFIG['default_lifetime'])
        
        # Validate lifetime
        if lifetime > SLURM_CONFIG['max_lifetime']:
            raise ValueError(f"Token lifetime cannot exceed {SLURM_CONFIG['max_lifetime']} seconds")
        
        payload = {
            # Standard claims
            'iss': SLURM_CONFIG['issuer'],
            'aud': SLURM_CONFIG['audience'],
            'sub': username,
            'iat': now,
            'exp': now + lifetime,
            'nbf': now - SLURM_CONFIG['clock_skew'],
            'jti': f"{username}-{now}-{os.getpid()}",  # Unique token ID
            
            # Slurm-specific claims
            'slurm': {
                'cluster': SLURM_CONFIG['cluster_name'],
                'version': '{{ slurm_version | default("25.05.1") }}',
                'user': username
            }
        }
        
        # Add optional claims
        if 'groups' in kwargs:
            payload['groups'] = kwargs['groups']
        if 'roles' in kwargs:
            payload['roles'] = kwargs['roles']
        if 'scope' in kwargs:
            payload['scope'] = kwargs['scope']
        if 'email' in kwargs:
            payload['email'] = kwargs['email']
        if 'name' in kwargs:
            payload['name'] = kwargs['name']
            
        # Add custom claims
        for key, value in kwargs.items():
            if key not in ['lifetime', 'groups', 'roles', 'scope', 'email', 'name']:
                payload[key] = value
                
        return payload
    
    def sign_token(self, header: Dict[str, Any], payload: Dict[str, Any]) -> str:
        """Sign JWT token using HMAC."""
        # Encode header and payload
        header_encoded = base64url_encode(json.dumps(header, separators=(',', ':')).encode())
        payload_encoded = base64url_encode(json.dumps(payload, separators=(',', ':')).encode())
        
        # Create signature
        message = f"{header_encoded}.{payload_encoded}"
        
        if SLURM_CONFIG['algorithm'] == 'HS256':
            signature = hmac.new(
                self.secret_key.encode(),
                message.encode(),
                hashlib.sha256
            ).digest()
        elif SLURM_CONFIG['algorithm'] == 'HS384':
            signature = hmac.new(
                self.secret_key.encode(),
                message.encode(),
                hashlib.sha384
            ).digest()
        elif SLURM_CONFIG['algorithm'] == 'HS512':
            signature = hmac.new(
                self.secret_key.encode(),
                message.encode(),
                hashlib.sha512
            ).digest()
        else:
            raise ValueError(f"Unsupported algorithm: {SLURM_CONFIG['algorithm']}")
        
        signature_encoded = base64url_encode(signature)
        
        return f"{message}.{signature_encoded}"
    
    def generate_token(self, username: str, **kwargs) -> str:
        """Generate a complete JWT token."""
        header = self.create_header(
            algorithm=kwargs.get('algorithm'),
            key_id=kwargs.get('key_id')
        )
        payload = self.create_payload(username, **kwargs)
        
        return self.sign_token(header, payload)
    
    def validate_token(self, token: str) -> Dict[str, Any]:
        """Validate and decode a JWT token."""
        try:
            header_b64, payload_b64, signature_b64 = token.split('.')
        except ValueError:
            raise ValueError("Invalid token format")
        
        # Decode header and payload
        header = json.loads(base64url_decode(header_b64))
        payload = json.loads(base64url_decode(payload_b64))
        
        # Verify signature
        message = f"{header_b64}.{payload_b64}"
        expected_signature = hmac.new(
            self.secret_key.encode(),
            message.encode(),
            hashlib.sha256
        ).digest()
        
        actual_signature = base64url_decode(signature_b64)
        
        if not hmac.compare_digest(expected_signature, actual_signature):
            raise ValueError("Invalid token signature")
        
        # Check expiration
        now = int(time.time())
        if payload.get('exp', 0) < now:
            raise ValueError("Token has expired")
        
        if payload.get('nbf', 0) > now:
            raise ValueError("Token not yet valid")
        
        return payload

# =============================================================================
# COMMAND LINE INTERFACE
# =============================================================================

def main():
    """Main CLI function."""
    parser = argparse.ArgumentParser(
        description='Slurm JWT Token Generator',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  %(prog)s --username john --lifetime 3600
  %(prog)s --username admin --groups admin,users --scope "slurm:admin"
  %(prog)s --validate "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        '''
    )
    
    # Token generation options
    parser.add_argument('--username', '-u', 
                       help='Username for the token')
    parser.add_argument('--lifetime', '-l', type=int, 
                       default=SLURM_CONFIG['default_lifetime'],
                       help=f'Token lifetime in seconds (default: {SLURM_CONFIG["default_lifetime"]})')
    parser.add_argument('--groups', '-g',
                       help='Comma-separated list of groups')
    parser.add_argument('--roles', '-r',
                       help='Comma-separated list of roles')
    parser.add_argument('--scope', '-s',
                       help='Token scope (e.g., "slurm:read slurm:write")')
    parser.add_argument('--email', '-e',
                       help='User email address')
    parser.add_argument('--name', '-n',
                       help='User full name')
    
    # Token validation
    parser.add_argument('--validate', '-v',
                       help='Validate an existing JWT token')
    
    # Output options
    parser.add_argument('--output', '-o',
                       choices=['token', 'json', 'yaml'],
                       default='token',
                       help='Output format (default: token)')
    parser.add_argument('--quiet', '-q', action='store_true',
                       help='Suppress informational output')
    
    # Configuration
    parser.add_argument('--config', '-c',
                       help='Path to custom configuration file')
    
    args = parser.parse_args()
    
    try:
        generator = SlurmJWTGenerator()
        
        if args.validate:
            # Validate token
            payload = generator.validate_token(args.validate)
            
            if args.output == 'json':
                print(json.dumps(payload, indent=2))
            elif args.output == 'yaml':
                try:
                    import yaml
                    print(yaml.dump(payload, default_flow_style=False))
                except ImportError:
                    print("PyYAML not available, using JSON format")
                    print(json.dumps(payload, indent=2))
            else:
                print("Token is valid!")
                if not args.quiet:
                    print(f"User: {payload.get('sub')}")
                    print(f"Expires: {datetime.fromtimestamp(payload.get('exp', 0))}")
                    print(f"Cluster: {payload.get('slurm', {}).get('cluster', 'unknown')}")
                    
        elif args.username:
            # Generate token
            kwargs = {}
            if args.groups:
                kwargs['groups'] = [g.strip() for g in args.groups.split(',')]
            if args.roles:
                kwargs['roles'] = [r.strip() for r in args.roles.split(',')]
            if args.scope:
                kwargs['scope'] = args.scope
            if args.email:
                kwargs['email'] = args.email
            if args.name:
                kwargs['name'] = args.name
            if args.lifetime:
                kwargs['lifetime'] = args.lifetime
                
            token = generator.generate_token(args.username, **kwargs)
            
            if args.output == 'json':
                output = {
                    'token': token,
                    'username': args.username,
                    'expires': datetime.fromtimestamp(time.time() + args.lifetime).isoformat(),
                    'cluster': SLURM_CONFIG['cluster_name']
                }
                print(json.dumps(output, indent=2))
            elif args.output == 'yaml':
                try:
                    import yaml
                    output = {
                        'token': token,
                        'username': args.username,
                        'expires': datetime.fromtimestamp(time.time() + args.lifetime).isoformat(),
                        'cluster': SLURM_CONFIG['cluster_name']
                    }
                    print(yaml.dump(output, default_flow_style=False))
                except ImportError:
                    print("PyYAML not available, outputting token only")
                    print(token)
            else:
                print(token)
                
        else:
            parser.print_help()
            sys.exit(1)
            
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()

# =============================================================================
# END OF JWT GENERATOR
# =============================================================================