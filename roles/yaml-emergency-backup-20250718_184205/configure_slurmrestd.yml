---
# =============================================================================
# НАСТРОЙКА SLURM REST API (SLURMRESTD)
# =============================================================================

- name: "Создание пользователя slurmrestd"
  user:
    name: "{{slurm_restd_user | default('slurmrestd')}}"
    system: true
    shell: /bin/false
    home: /var/lib/slurmrestd
    create_home: true
    groups: "{{slurm_group}}"
    append: true
  tags: [slurmrestd, users]

- name: "Создание директорий для slurmrestd"
  file:
    path: "{{item}}"
    state: directory
    owner: "{{slurm_restd_user | default('slurmrestd')}}"
    group: "{{slurm_group}}"
    mode: "0755"
  loop:
  - /var/lib/slurmrestd
  - /var/log/slurmrestd
  - /var/run/slurmrestd
  - "{{slurm_restd_config_dir | default('/etc/slurm/restd')}}"
  tags: [slurmrestd, directories]

- name: "Установка зависимостей для REST API"
  package:
    name: "{{item}}"
    state: present
  loop:
  - libhttp-parser-dev
  - libjson-c-dev
  - libcurl4-openssl-dev
  - libssl-dev
  when: ansible_os_family == "Debian"
  tags: [slurmrestd, packages]

- name: "Установка зависимостей для REST API (RHEL/CentOS)"
  package:
    name: "{{item}}"
    state: present
  loop:
  - http-parser-devel
  - json-c-devel
  - libcurl-devel
  - openssl-devel
  when: ansible_os_family == "RedHat"
  tags: [slurmrestd, packages]

- name: "Создание конфигурационного файла slurmrestd"
  template:
    src: slurmrestd.conf.j2
    dest: "{{slurm_config_dir}}/slurmrestd.conf"
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: "0644"
    backup: true
  notify:
  - restart slurmrestd
  tags: [slurmrestd, config]

- name: "Создание systemd unit файла для slurmrestd"
  template:
    src: slurmrestd.service.j2
    dest: /etc/systemd/system/slurmrestd.service
    owner: root
    group: root
    mode: "0644"
  notify:
  - reload systemd
  - restart slurmrestd
  tags: [slurmrestd, systemd]

- name: "Настройка JWT аутентификации для REST API"
  block:
- name: "Копирование JWT ключей для slurmrestd"
    copy:
      src: "{{slurm_jwt_key_file}}"
      dest: "{{slurm_restd_config_dir | default('/etc/slurm/restd')}}/jwt.key"
      owner: "{{slurm_restd_user | default('slurmrestd')}}"
      group: "{{slurm_group}}"
      mode: "0600"
      remote_src: true
    notify:
    - restart slurmrestd

- name: "Создание JWKS файла для REST API"
    template:
      src: slurm.jwks.j2
      dest: "{{slurm_restd_config_dir | default('/etc/slurm/restd')}}/slurm.jwks"
      owner: "{{slurm_restd_user | default('slurmrestd')}}"
      group: "{{slurm_group}}"
      mode: "0644"
    notify:
    - restart slurmrestd

- name: "Установка генератора JWT токенов"
    template:
      src: jwt_generator.py.j2
      dest: "{{slurm_install_prefix}}/bin/slurm-jwt-generator"
      owner: root
      group: root
      mode: "0755"

- name: "Создание символической ссылки для генератора JWT"
    file:
      src: "{{slurm_install_prefix}}/bin/slurm-jwt-generator"
      dest: /usr/local/bin/slurm-jwt-generator
      state: link
      owner: root
      group: root

  when: slurm_enable_jwt_auth | default(false)
  tags: [slurmrestd, jwt, auth]

- name: "Настройка TLS/SSL для REST API"
  block:
- name: "Создание директории для SSL сертификатов"
    file:
      path: "{{slurm_restd_ssl_dir | default('/etc/slurm/ssl')}}"
      state: directory
      owner: root
      group: "{{slurm_group}}"
      mode: "0750"

- name: "Генерация самоподписанного SSL сертификата"
    command: >
      openssl req -x509 -nodes -days 365 -newkey rsa:4096 -keyout {{slurm_restd_ssl_dir | default('/etc/slurm/ssl')}}/slurmrestd.key -out {{slurm_restd_ssl_dir | default('/etc/slurm/ssl')}}/slurmrestd.crt -subj "/C={{slurm_ssl_country | default('US')}}/ST={{slurm_ssl_state | default('Unknown')}}/L={{slurm_ssl_city | default('Unknown')}}/O={{slurm_ssl_org | default('Slurm Cluster')}}/OU={{slurm_ssl_unit | default('HPC')}}/CN={{slurm_master_node}}"
    args:
      creates: "{{slurm_restd_ssl_dir | default('/etc/slurm/ssl')}}/slurmrestd.crt"
    when: slurm_restd_generate_ssl | default(true)

- name: "Установка прав на SSL файлы"
    file:
      path: "{{item.path}}"
      owner: "{{item.owner}}"
      group: "{{slurm_group}}"
      mode: "{{item.mode}}"
    loop:
    - {path: "{{slurm_restd_ssl_dir | default('/etc/slurm/ssl')}}/slurmrestd.key", owner: "{{slurm_restd_user | default('slurmrestd')}}", mode: "0600"}
    - {path: "{{slurm_restd_ssl_dir | default('/etc/slurm/ssl')}}/slurmrestd.crt", owner: "{{slurm_restd_user | default('slurmrestd')}}", mode: "0644"}
    when: slurm_restd_generate_ssl | default(true)

  when: slurm_enable_rest_ssl | default(true)
  tags: [slurmrestd, ssl, security]

- name: "Настройка firewall для REST API"
  firewalld:
    port: "{{slurm_slurmrestd_port}}/tcp"
    permanent: true
    state: enabled
    immediate: true
  when:
  - ansible_os_family == "RedHat"
  - slurm_configure_firewall | default(true)
  tags: [slurmrestd, firewall, security]

- name: "Настройка UFW для REST API (Ubuntu/Debian)"
  ufw:
    rule: allow
    port: "{{slurm_slurmrestd_port}}"
    proto: tcp
    comment: "Slurm REST API"
  when:
  - ansible_os_family == "Debian"
  - slurm_configure_firewall | default(true)
  tags: [slurmrestd, firewall, security]

- name: "Создание скрипта управления REST API"
  copy:
    content: |
      #!/bin/bash
      # Slurm REST API Control Script
      case "$1" in
        start)
          systemctl start slurmrestd
          ;;
        stop)
          systemctl stop slurmrestd
          ;;
        restart)
          systemctl restart slurmrestd
          ;;
        status)
          systemctl status slurmrestd
          ;;
        *)
          echo "Usage: $0 {start|stop|restart|status}"
          exit 1
          ;;
      esac
    dest: "{{slurm_install_prefix}}/bin/slurmrestd-control"
    owner: root
    group: root
    mode: "0755"
  tags: [slurmrestd, scripts]

- name: "Настройка логротации для slurmrestd"
  copy:
    content: |
      /var/log/slurmrestd/*.log {
          daily
          missingok
          rotate 52
          compress
          delaycompress
          notifempty
          create 644 {{slurm_restd_user | default('slurmrestd')}} {{slurm_group}}
          postrotate
              systemctl reload slurmrestd > /dev/null 2>&1 || true
          endscript
    }
    dest: /etc/logrotate.d/slurmrestd
    owner: root
    group: root
    mode: "0644"
  tags: [slurmrestd, logging]

- name: "Включение и запуск slurmrestd"
  systemd:
    name: slurmrestd
    enabled: true
    state: started
    daemon_reload: true
  when: slurm_start_services | default(true)
  tags: [slurmrestd, services]

- name: "Проверка статуса slurmrestd"
  command: systemctl is-active slurmrestd
  register: slurmrestd_status
  changed_when: false
  failed_when: false
  tags: [slurmrestd, validation]

- name: "Отображение статуса slurmrestd"
  debug:
    msg: "Slurmrestd service status: {{slurmrestd_status.stdout}}"
  tags: [slurmrestd, validation]

- name: "Проверка доступности REST API"
  uri:
    url: "{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_node}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/ping"
    method: GET
    validate_certs: false
    timeout: 10
  register: rest_api_check
  failed_when: false
  when: slurm_validate_rest_api | default(true)
  tags: [slurmrestd, validation]

- name: "Отображение результата проверки REST API"
  debug:
    msg: |
      REST API check result:
      Status: {{rest_api_check.status | default('Failed to connect')}}
      URL: {{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_node}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/ping
  when: slurm_validate_rest_api | default(true)
  tags: [slurmrestd, validation]

- name: "Создание примера использования REST API"
  copy:
    content: |
      #!/bin/bash
      # Slurm REST API Examples

      BASE_URL="{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_node}}:{{slurm_slurmrestd_port}}"

      echo "=== Slurm REST API Examples ==="
      echo "Base URL: $BASE_URL"
      echo ""

      # Ping test
      echo "1. Ping test:"
      echo "curl -k $BASE_URL/slurm/v0.0.41/ping"
      echo ""

      # Get cluster info
      echo "2. Cluster info:"
      echo "curl -k $BASE_URL/slurm/v0.0.41/diag"
      echo ""

      # Get jobs
      echo "3. List jobs:"
      echo "curl -k $BASE_URL/slurm/v0.0.41/jobs"
      echo ""

      # Get nodes
      echo "4. List nodes:"
      echo "curl -k $BASE_URL/slurm/v0.0.41/nodes"
      echo ""
    dest: "{{slurm_install_prefix}}/share/slurm/rest-api-examples.sh"
    owner: root
    group: root
    mode: "0755"
  tags: [slurmrestd, examples]
