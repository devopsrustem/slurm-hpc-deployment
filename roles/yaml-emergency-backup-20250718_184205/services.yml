---
# =============================================================================
# УПРАВЛЕНИЕ SLURM СЕРВИСАМИ
# =============================================================================

- name: "Перезагрузка systemd daemon"
  systemd:
    daemon_reload: true
  tags: [services, systemd]

- name: "Проверка статуса MUNGE перед запуском Slurm сервисов"
  systemd:
    name: munge
    state: started
    enabled: true
  tags: [services, munge, dependencies]

- name: "Ожидание готовности MUNGE"
  wait_for:
    path: /var/run/munge/munge.socket.2
    timeout: 30
  ignore_errors: true
  tags: [services, munge, dependencies]

- name: "Проверка доступности MySQL для slurmdbd"
  wait_for:
    host: "{{slurm_db_host | default('localhost')}}"
    port: "{{slurm_db_port | default(3306)}}"
    timeout: 30
  when: slurm_enable_slurmdbd | default(true)
  tags: [services, mysql, dependencies]

- name: "Запуск и включение slurmdbd"
  systemd:
    name: slurmdbd
    state: started
    enabled: true
    daemon_reload: true
  when: slurm_enable_slurmdbd | default(true)
  register: slurmdbd_service
  tags: [services, slurmdbd]

- name: "Ожидание готовности slurmdbd"
  wait_for:
    host: "{{slurm_master_address}}"
    port: "{{slurm_slurmdbd_port}}"
    timeout: 60
  when:
  - slurm_enable_slurmdbd | default(true)
  - slurmdbd_service is changed
  tags: [services, slurmdbd, dependencies]

- name: "Проверка подключения к slurmdbd"
  command: >
    {{slurm_install_prefix}}/bin/sacctmgr -i list cluster {{slurm_cluster_name}}
  register: slurmdbd_test
  failed_when: false
  changed_when: false
  when: slurm_enable_slurmdbd | default(true)
  tags: [services, slurmdbd, validation]

- name: "Отображение статуса подключения к slurmdbd"
  debug:
    msg: |
      Slurmdbd connection test:
      Return code: {{slurmdbd_test.rc | default('N/A')}}
      Output: {{slurmdbd_test.stdout | default('N/A')}}
      Error: {{slurmdbd_test.stderr | default('N/A')}}
  when: slurm_enable_slurmdbd | default(true)
  tags: [services, slurmdbd, validation]

- name: "Запуск и включение slurmctld"
  systemd:
    name: slurmctld
    state: started
    enabled: true
    daemon_reload: true
  register: slurmctld_service
  tags: [services, slurmctld]

- name: "Ожидание готовности slurmctld"
  wait_for:
    host: "{{slurm_master_address}}"
    port: "{{slurm_slurmctld_port}}"
    timeout: 120
  when: slurmctld_service is changed
  tags: [services, slurmctld, dependencies]

- name: "Проверка статуса slurmctld"
  command: "{{slurm_install_prefix}}/bin/sinfo"
  register: slurmctld_test
  failed_when: false
  changed_when: false
  tags: [services, slurmctld, validation]

- name: "Отображение статуса кластера"
  debug:
    msg: |
      Cluster status (sinfo):
      Return code: {{slurmctld_test.rc | default('N/A')}}
      Output: {{slurmctld_test.stdout_lines | default(['N/A']) | join('\n')}}
      Error: {{slurmctld_test.stderr | default('N/A')}}
  tags: [services, slurmctld, validation]

- name: "Запуск и включение slurmrestd"
  systemd:
    name: slurmrestd
    state: started
    enabled: true
    daemon_reload: true
  when: slurm_enable_rest_api | default(false)
  register: slurmrestd_service
  tags: [services, slurmrestd]

- name: "Ожидание готовности slurmrestd"
  wait_for:
    host: "{{slurm_master_address}}"
    port: "{{slurm_slurmrestd_port}}"
    timeout: 60
  when:
  - slurm_enable_rest_api | default(false)
  - slurmrestd_service is changed
  tags: [services, slurmrestd, dependencies]

- name: "Проверка REST API"
  uri:
    url: "{{'https' if slurm_enable_rest_ssl | default(true) else 'http'}}://{{slurm_master_address}}:{{slurm_slurmrestd_port}}/slurm/v0.0.41/ping"
    method: GET
    validate_certs: false
    timeout: 10
  register: rest_api_test
  failed_when: false
  when: slurm_enable_rest_api | default(false)
  tags: [services, slurmrestd, validation]

- name: "Отображение статуса REST API"
  debug:
    msg: |
      REST API status:
      Status code: {{rest_api_test.status | default('N/A')}}
      Response: {{rest_api_test.json | default('N/A')}}
  when: slurm_enable_rest_api | default(false)
  tags: [services, slurmrestd, validation]

- name: "Создание скрипта управления сервисами Slurm"
  copy:
    content: |
      #!/bin/bash
      # Slurm Services Management Script

      case "$1" in
        start)
          echo "Starting Slurm services..."
          systemctl start munge
          {% if slurm_enable_slurmdbd | default(true) %}
          systemctl start slurmdbd
          {% endif %}
          systemctl start slurmctld
          {% if slurm_enable_rest_api | default(false) %}
          systemctl start slurmrestd
          {% endif %}
          ;;
        stop)
          echo "Stopping Slurm services..."
          {% if slurm_enable_rest_api | default(false) %}
          systemctl stop slurmrestd
          {% endif %}
          systemctl stop slurmctld
          {% if slurm_enable_slurmdbd | default(true) %}
          systemctl stop slurmdbd
          {% endif %}
          systemctl stop munge
          ;;
        restart)
          $0 stop
          sleep 5
          $0 start
          ;;
        status)
          echo "=== Slurm Services Status ==="
          systemctl status munge --no-pager
          {% if slurm_enable_slurmdbd | default(true) %}
          systemctl status slurmdbd --no-pager
          {% endif %}
          systemctl status slurmctld --no-pager
          {% if slurm_enable_rest_api | default(false) %}
          systemctl status slurmrestd --no-pager
          {% endif %}
          ;;
        *)
          echo "Usage: $0 {start|stop|restart|status}"
          exit 1
          ;;
      esac
    dest: "{{slurm_install_prefix}}/bin/slurm-services"
    owner: root
    group: root
    mode: "0755"
  tags: [services, scripts]

- name: "Настройка cron задачи для резервного копирования"
  cron:
    name: "Backup Slurm state"
    minute: "{{slurm_backup_minute | default('0')}}"
    hour: "{{slurm_backup_hour | default('2')}}"
    day: "{{slurm_backup_day | default('*')}}"
    month: "{{slurm_backup_month | default('*')}}"
    weekday: "{{slurm_backup_weekday | default('*')}}"
    user: root
    job: "{{slurm_install_prefix}}/bin/backup-slurm-full"
    state: "{{'present' if slurm_enable_backup | default(true) else 'absent'}}"
  tags: [services, backup, cron]

- name: "Финальная проверка всех сервисов"
  systemd:
    name: "{{item}}"
  register: service_status
  failed_when: false
  loop:
  - munge
  - "{{'slurmdbd' if slurm_enable_slurmdbd | default(true) else omit}}"
  - slurmctld
  - "{{'slurmrestd' if slurm_enable_rest_api | default(false) else omit}}"
  when: item != omit
  tags: [services, validation]

- name: "Отображение статуса всех сервисов"
  debug:
    msg: |
      Service status summary:
      {% for result in service_status.results %}
      {% if result.item != omit %}
      {{result.item}}: {{result.status.ActiveState | default('unknown')}}
      {% endif %}
      {% endfor %}
  tags: [services, validation]

- name: "Создание файла статуса кластера"
  copy:
    content: |
      Cluster: {{slurm_cluster_name}}
      Last updated: {{ansible_date_time.iso8601}}
      Master node: {{slurm_master_node}}
      Services status: $(systemctl is-active slurmctld slurmdbd munge)

      For detailed status run: {{slurm_install_prefix}}/bin/sinfo
    dest: "{{slurm_config_dir}}/cluster-status.txt"
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: "0644"
  tags: [services, status]
