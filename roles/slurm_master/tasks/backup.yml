# =============================================================================
# РЕЗЕРВНОЕ КОПИРОВАНИЕ SLURM КЛАСТЕРА
# =============================================================================

- name: "Создание директорий для резервного копирования"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0750"
  loop:
  - "{{ slurm_backup_dir | default('/var/backups/slurm') }}"
  - "{{ slurm_backup_dir | default('/var/backups/slurm') }}/config"
  - "{{ slurm_backup_dir | default('/var/backups/slurm') }}/database"
  - "{{ slurm_backup_dir | default('/var/backups/slurm') }}/state"
  - "{{ slurm_backup_dir | default('/var/backups/slurm') }}/logs"
  - "{{ slurm_backup_dir | default('/var/backups/slurm') }}/scripts"
  tags: [ backup, directories ]

- name: "Создание скрипта резервного копирования конфигурации"
  template:
    src: backup-slurm-config.sh.j2
    dest: "{{ slurm_install_prefix }}/bin/backup-slurm-config"
    owner: root
    group: root
    mode: "0755"
  tags: [ backup, scripts, config ]

- name: "Создание скрипта резервного копирования базы данных"
  template:
    src: backup-slurm-database.sh.j2
    dest: "{{ slurm_install_prefix }}/bin/backup-slurm-database"
    owner: root
    group: root
    mode: "0755"
  when: slurm_enable_slurmdbd | default(true)
  tags: [ backup, scripts, database ]

- name: "Создание скрипта резервного копирования состояния"
  template:
    src: backup-slurm-state.sh.j2
    dest: "{{ slurm_install_prefix }}/bin/backup-slurm-state"
    owner: root
    group: root
    mode: "0755"
  tags: [ backup, scripts, state ]

- name: "Создание основного скрипта резервного копирования"
  copy:
    content: |
      #!/bin/bash
      # =============================================================================
      # MAIN SLURM BACKUP SCRIPT - GENERATED BY ANSIBLE
      # =============================================================================

      set -euo pipefail

      # Configuration
      BACKUP_DIR="{{ slurm_backup_dir | default('/var/backups/slurm') }}"
      DATE=$(date +%Y%m%d_%H%M%S)
      RETENTION_DAYS="{{ slurm_backup_retention_days | default(30) }}"
      LOG_FILE="${BACKUP_DIR}/backup-${DATE}.log"

      # Logging function
      log() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "${LOG_FILE}"
      }

      # Error handling
      cleanup() {
          local exit_code=$?
          if [[ $exit_code -ne 0 ]]; then
              log "ERROR: Backup failed with exit code $exit_code"
              # Send notification if configured
              {% if slurm_backup_notification_email is defined %}
              echo "Slurm backup failed on $(hostname) at $(date)" | \
                  mail -s "Slurm Backup Failure" {{ slurm_backup_notification_email }}
              {% endif %}
          else
              log "SUCCESS: Backup completed successfully"
          fi
          exit $exit_code
      }
      trap cleanup EXIT

      log "Starting Slurm backup process"

      # Create timestamped backup directory
      BACKUP_SUBDIR="${BACKUP_DIR}/${DATE}"
      mkdir -p "${BACKUP_SUBDIR}"

      # Backup configuration files
      log "Backing up configuration files..."
      {{ slurm_install_prefix }}/bin/backup-slurm-config "${BACKUP_SUBDIR}/config"

      {% if slurm_enable_slurmdbd | default(true) %}
      # Backup database
      log "Backing up database..."
      {{ slurm_install_prefix }}/bin/backup-slurm-database "${BACKUP_SUBDIR}/database"
      {% endif %}

      # Backup state
      log "Backing up state files..."
      {{ slurm_install_prefix }}/bin/backup-slurm-state "${BACKUP_SUBDIR}/state"

      # Create archive
      log "Creating compressed archive..."
      cd "${BACKUP_DIR}"
      tar -czf "slurm-backup-${DATE}.tar.gz" "${DATE}/"

      # Remove uncompressed backup
      rm -rf "${DATE}/"

      # Cleanup old backups
      log "Cleaning up old backups (retention: ${RETENTION_DAYS} days)..."
      find "${BACKUP_DIR}" -name "slurm-backup-*.tar.gz" -type f -mtime +${RETENTION_DAYS} -delete
      find "${BACKUP_DIR}" -name "backup-*.log" -type f -mtime +${RETENTION_DAYS} -delete

      # Generate backup report
      BACKUP_SIZE=$(du -h "slurm-backup-${DATE}.tar.gz" | cut -f1)
      log "Backup completed: slurm-backup-${DATE}.tar.gz (${BACKUP_SIZE})"

      # Send success notification if configured
      {% if slurm_backup_notification_email is defined %}
      {
          echo "Slurm backup completed successfully on $(hostname)"
          echo "Date: $(date)"
          echo "Backup file: slurm-backup-${DATE}.tar.gz"
          echo "Size: ${BACKUP_SIZE}"
          echo ""
          echo "Backup contents:"
          tar -tzf "slurm-backup-${DATE}.tar.gz" | head -20
      } | mail -s "Slurm Backup Success" {{ slurm_backup_notification_email }}
      {% endif %}
    dest: "{{ slurm_install_prefix }}/bin/backup-slurm-full"
    owner: root
    group: root
    mode: "0755"
  tags: [ backup, scripts, main ]

- name: "Создание скрипта восстановления"
  copy:
    content: |
      #!/bin/bash
      # =============================================================================
      # SLURM RESTORE SCRIPT - GENERATED BY ANSIBLE
      # =============================================================================

      set -euo pipefail

      BACKUP_DIR="{{ slurm_backup_dir | default('/var/backups/slurm') }}"
      RESTORE_TEMP="/tmp/slurm-restore-$$"

      usage() {
          echo "Usage: $0 <backup-file> [--config-only|--database-only|--state-only]"
          echo ""
          echo "Available backups:"
          ls -la "${BACKUP_DIR}"/slurm-backup-*.tar.gz 2>/dev/null || echo "No backups found"
          exit 1
      }

      [[ $# -lt 1 ]] && usage

      BACKUP_FILE="$1"
      RESTORE_TYPE="${2:-full}"

      # Validate backup file
      if [[ ! -f "$BACKUP_FILE" ]]; then
          echo "Error: Backup file not found: $BACKUP_FILE"
          exit 1
      fi

      echo "WARNING: This will restore Slurm configuration and data from backup!"
      echo "Backup file: $BACKUP_FILE"
      echo "Restore type: $RESTORE_TYPE"
      echo ""
      read -p "Are you sure you want to continue? (yes/no): " confirm

      if [[ "$confirm" != "yes" ]]; then
          echo "Restore cancelled"
          exit 0
      fi

      # Create temporary directory
      mkdir -p "$RESTORE_TEMP"

      # Extract backup
      echo "Extracting backup..."
      tar -xzf "$BACKUP_FILE" -C "$RESTORE_TEMP"

      # Find extracted directory
      EXTRACT_DIR=$(find "$RESTORE_TEMP" -mindepth 1 -maxdepth 1 -type d | head -1)

      if [[ -z "$EXTRACT_DIR" ]]; then
          echo "Error: Could not find extracted backup directory"
          rm -rf "$RESTORE_TEMP"
          exit 1
      fi

      # Stop Slurm services
      echo "Stopping Slurm services..."
      systemctl stop slurmctld || true
      {% if slurm_enable_slurmdbd | default(true) %}
      systemctl stop slurmdbd || true
      {% endif %}
      {% if slurm_enable_rest_api | default(false) %}
      systemctl stop slurmrestd || true
      {% endif %}

      # Restore based on type
      case "$RESTORE_TYPE" in
          "full"|"--config-only")
              echo "Restoring configuration files..."
              if [[ -d "$EXTRACT_DIR/config" ]]; then
                  cp -r "$EXTRACT_DIR/config"/* {{ slurm_config_dir }}/
                  chown -R {{ slurm_user }}:{{ slurm_group }} {{ slurm_config_dir }}
              fi
              ;;&
          
          "full"|"--state-only")
              echo "Restoring state files..."
              if [[ -d "$EXTRACT_DIR/state" ]]; then
                  cp -r "$EXTRACT_DIR/state"/* {{ slurm_state_save_location }}/
                  chown -R {{ slurm_user }}:{{ slurm_group }} {{ slurm_state_save_location }}
              fi
              ;;&
          
          "full"|"--database-only")
              {% if slurm_enable_slurmdbd | default(true) %}
              echo "Restoring database..."
              if [[ -f "$EXTRACT_DIR/database/slurmdbd.sql" ]]; then
                  mysql -u root -p {{ slurm_db_name }} < "$EXTRACT_DIR/database/slurmdbd.sql"
              fi
              {% endif %}
              ;;
      esac

      # Cleanup
      rm -rf "$RESTORE_TEMP"

      # Start services
      echo "Starting Slurm services..."
      {% if slurm_enable_slurmdbd | default(true) %}
      systemctl start slurmdbd
      sleep 5
      {% endif %}
      systemctl start slurmctld
      {% if slurm_enable_rest_api | default(false) %}
      systemctl start slurmrestd
      {% endif %}

      echo "Restore completed successfully!"
      echo "Please verify cluster status with: {{ slurm_install_prefix }}/bin/sinfo"
    dest: "{{ slurm_install_prefix }}/bin/restore-slurm"
    owner: root
    group: root
    mode: "0755"
  tags: [ backup, scripts, restore ]

- name: "Настройка автоматического резервного копирования"
  cron:
    name: "Slurm {{ item.name }} backup"
    minute: "{{ item.minute | default('*') }}"
    hour: "{{ item.hour | default('*') }}"
    day: "{{ item.day | default('*') }}"
    month: "{{ item.month | default('*') }}"
    weekday: "{{ item.weekday | default('*') }}"
    user: root
    job: "{{ item.job }}"
    state: "{{ 'present' if slurm_enable_backup | default(true) else 'absent' }}"
  loop:
  - name: "configuration"
    hour: "2"
    minute: "0"
    job: "{{ slurm_install_prefix }}/bin/backup-slurm-config {{ slurm_backup_dir | default('/var/backups/slurm') }}/config/$(date +\\%Y\\%m\\%d)"
  - name: "database"
    hour: "2"
    minute: "30"
    weekday: "0"
    job: "{{ slurm_install_prefix }}/bin/backup-slurm-database {{ slurm_backup_dir | default('/var/backups/slurm') }}/database/$(date +\\%Y\\%m\\%d)"
  - name: "full system"
    hour: "3"
    minute: "0"
    weekday: "0"
    job: "{{ slurm_install_prefix }}/bin/backup-slurm-full"
  when: item.name != "database" or slurm_enable_slurmdbd | default(true)
  tags: [ backup, cron, automation ]

- name: "Создание скрипта проверки резервных копий"
  copy:
    content: |
      #!/bin/bash
      # =============================================================================
      # SLURM BACKUP VERIFICATION SCRIPT
      # =============================================================================

      BACKUP_DIR="{{ slurm_backup_dir | default('/var/backups/slurm') }}"

      echo "=== Slurm Backup Status ==="
      echo "Backup directory: $BACKUP_DIR"
      echo ""

      # Check backup directory
      if [[ ! -d "$BACKUP_DIR" ]]; then
          echo "ERROR: Backup directory does not exist!"
          exit 1
      fi

      # List recent backups
      echo "Recent backups:"
      find "$BACKUP_DIR" -name "slurm-backup-*.tar.gz" -type f -mtime -7 -exec ls -lh {} \; | sort -k9
      echo ""

      # Check backup age
      LATEST_BACKUP=$(find "$BACKUP_DIR" -name "slurm-backup-*.tar.gz" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)

      if [[ -n "$LATEST_BACKUP" ]]; then
          BACKUP_AGE_DAYS=$(( ($(date +%s) - $(stat -c %Y "$LATEST_BACKUP")) / 86400 ))
          echo "Latest backup: $(basename "$LATEST_BACKUP")"
          echo "Age: $BACKUP_AGE_DAYS days"
          
          if [[ $BACKUP_AGE_DAYS -gt 7 ]]; then
              echo "WARNING: Latest backup is older than 7 days!"
          fi
      else
          echo "WARNING: No backups found!"
      fi

      echo ""

      # Check backup integrity
      if [[ -n "$LATEST_BACKUP" ]]; then
          echo "Verifying latest backup integrity..."
          if tar -tzf "$LATEST_BACKUP" >/dev/null 2>&1; then
              echo "✓ Backup archive is valid"
          else
              echo "✗ Backup archive is corrupted!"
              exit 1
          fi
      fi

      # Disk space check
      echo ""
      echo "Backup directory disk usage:"
      du -sh "$BACKUP_DIR"

      AVAILABLE_SPACE=$(df "$BACKUP_DIR" | awk 'NR==2 {print $4}')
      USED_PERCENT=$(df "$BACKUP_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')

      if [[ $USED_PERCENT -gt 90 ]]; then
          echo "WARNING: Backup partition is ${USED_PERCENT}% full!"
      fi

      echo ""
      echo "Backup status check completed."
    dest: "{{ slurm_install_prefix }}/bin/check-slurm-backups"
    owner: root
    group: root
    mode: "0755"
  tags: [ backup, scripts, verification ]

- name: "Настройка мониторинга резервных копий"
  cron:
    name: "Check Slurm backups"
    minute: "0"
    hour: "8"
    user: root
    job: "{{ slurm_install_prefix }}/bin/check-slurm-backups"
    state: "{{ 'present' if slurm_enable_backup_monitoring | default(true) else 'absent' }}"
  tags: [ backup, monitoring, cron ]

- name: "Создание конфигурации для удаленного резервного копирования"
  template:
    src: backup-remote-sync.conf.j2
    dest: "{{ slurm_config_dir }}/backup-remote-sync.conf"
    owner: root
    group: root
    mode: "0600"
  when: slurm_backup_remote_enabled | default(false)
  tags: [ backup, remote, config ]

- name: "Создание скрипта удаленного резервного копирования"
  template:
    src: backup-remote-sync.sh.j2
    dest: "{{ slurm_install_prefix }}/bin/backup-remote-sync"
    owner: root
    group: root
    mode: "0755"
  when: slurm_backup_remote_enabled | default(false)
  tags: [ backup, remote, scripts ]

- name: "Настройка удаленного резервного копирования"
  cron:
    name: "Sync Slurm backups to remote location"
    minute: "0"
    hour: "5"
    user: root
    job: "{{ slurm_install_prefix }}/bin/backup-remote-sync"
    state: "{{ 'present' if slurm_backup_remote_enabled | default(false) else 'absent' }}"
  when: slurm_backup_remote_enabled | default(false)
  tags: [ backup, remote, cron ]

- name: "Создание документации по резервному копированию"
  copy:
    content: |
      # Slurm Backup and Restore Guide

      ## Backup Scripts

      ### Full Backup
      ```bash
      {{ slurm_install_prefix }}/bin/backup-slurm-full
      ```

      ### Configuration Only
      ```bash
      {{ slurm_install_prefix }}/bin/backup-slurm-config /path/to/backup/dir
      ```

      ### Database Only
      ```bash
      {{ slurm_install_prefix }}/bin/backup-slurm-database /path/to/backup/dir
      ```

      ### State Files Only
      ```bash
      {{ slurm_install_prefix }}/bin/backup-slurm-state /path/to/backup/dir
      ```

      ## Restore Procedures

      ### Full Restore
      ```bash
      {{ slurm_install_prefix }}/bin/restore-slurm /path/to/backup.tar.gz
      ```

      ### Configuration Only
      ```bash
      {{ slurm_install_prefix }}/bin/restore-slurm /path/to/backup.tar.gz --config-only
      ```

      ### Database Only
      ```bash
      {{ slurm_install_prefix }}/bin/restore-slurm /path/to/backup.tar.gz --database-only
      ```

      ## Backup Verification
      ```bash
      {{ slurm_install_prefix }}/bin/check-slurm-backups
      ```

      ## Backup Locations
      - Main backup directory: {{ slurm_backup_dir | default('/var/backups/slurm') }}
      - Configuration backups: {{ slurm_backup_dir | default('/var/backups/slurm') }}/config/
      - Database backups: {{ slurm_backup_dir | default('/var/backups/slurm') }}/database/
      - State backups: {{ slurm_backup_dir | default('/var/backups/slurm') }}/state/

      ## Automated Schedules
      - Configuration backup: Daily at 02:00
      - Database backup: Weekly (Sunday) at 02:30
      - Full backup: Weekly (Sunday) at 03:00
      - Backup verification: Daily at 08:00

      ## Retention Policy
      - Backup retention: {{ slurm_backup_retention_days | default(30) }} days
      - Old backups are automatically cleaned up

      ## Important Notes
      1. Always test restore procedures in a development environment first
      2. Verify backup integrity regularly
      3. Monitor backup storage space
      4. Keep recent backups in multiple locations
      5. Document any custom configurations not covered by automated backups
    dest: "{{ slurm_config_dir }}/backup-restore-guide.md"
    owner: root
    group: root
    mode: "0644"
  tags: [ backup, documentation ]

- name: "Первоначальное резервное копирование"
  command: "{{ slurm_install_prefix }}/bin/backup-slurm-full"
  when: slurm_create_initial_backup | default(true)
  tags: [ backup, initial ]

- name: "Проверка созданных резервных копий"
  command: "{{ slurm_install_prefix }}/bin/check-slurm-backups"
  register: backup_check
  when: slurm_create_initial_backup | default(true)
  tags: [ backup, verification ]

- name: "Отображение статуса резервного копирования"
  debug:
    msg: |
      ================================================================
      РЕЗЕРВНОЕ КОПИРОВАНИЕ SLURM НАСТРОЕНО
      ================================================================

      Доступные команды:
      - Полное резервное копирование: {{ slurm_install_prefix }}/bin/backup-slurm-full
      - Копирование конфигурации: {{ slurm_install_prefix }}/bin/backup-slurm-config
      {% if slurm_enable_slurmdbd | default(true) %}
      - Копирование базы данных: {{ slurm_install_prefix }}/bin/backup-slurm-database
      {% endif %}
      - Копирование состояния: {{ slurm_install_prefix }}/bin/backup-slurm-state
      - Восстановление: {{ slurm_install_prefix }}/bin/restore-slurm
      - Проверка резервных копий: {{ slurm_install_prefix }}/bin/check-slurm-backups

      Расположение резервных копий: {{ slurm_backup_dir | default('/var/backups/slurm') }}
      Период хранения: {{ slurm_backup_retention_days | default(30) }} дней

      Автоматическое расписание:
      - Конфигурация: ежедневно в 02:00
      {% if slurm_enable_slurmdbd | default(true) %}
      - База данных: еженедельно в воскресенье в 02:30
      {% endif %}
      - Полная копия: еженедельно в воскресенье в 03:00

      {% if slurm_backup_remote_enabled | default(false) %}
      Удаленное копирование: ВКЛЮЧЕНО
      {% endif %}

      Документация: {{ slurm_config_dir }}/backup-restore-guide.md
      ================================================================
  tags: [ backup, summary ]
