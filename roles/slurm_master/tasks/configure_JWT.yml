---
# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê JWT –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –î–õ–Ø SLURM
# =============================================================================
- name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ libjwt"
  package_facts:
    manager: "auto"
- name: "–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫"
  assert:
    that:
    - "'libjwt-dev' in ansible_facts.packages or 'libjwt0' in ansible_facts.packages"
    fail_msg: "libjwt –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è JWT –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    success_msg: "libjwt —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
  tags:
  - jwt
  - validation
- name: "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è JWT –∫–ª—é—á–µ–π"
  file:
    path: /etc/slurm/jwt
    state: directory
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: '0700'
  tags:
  - jwt
  - security
- name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è JWT –∫–ª—é—á–∞"
  stat:
    path: "{{jwt_options.key_file}}"
  register: jwt_key_exists
  tags:
  - jwt
- name: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT –∫–ª—é—á–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"
  shell: |
    openssl rand -base64 32 > {{jwt_options.key_file}}
  when: not jwt_key_exists.stat.exists
  tags:
  - jwt
  - security
- name: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –Ω–∞ JWT –∫–ª—é—á"
  file:
    path: "{{jwt_options.key_file}}"
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: '0600'
  tags:
  - jwt
  - security
- name: "–°–æ–∑–¥–∞–Ω–∏–µ JWKS —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"
  template:
    src: slurm.jwks.j2
    dest: "{{jwt_options.jwks_file}}"
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: '0600'
    backup: true
  tags:
  - jwt
  - config
- name: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤"
  template:
    src: jwt_generator.py.j2
    dest: /usr/local/bin/slurm_jwt_generator.py
    owner: root
    group: root
    mode: '0755'
  tags:
  - jwt
  - tools
- name: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤"
  template:
    src: jwt_validator.py.j2
    dest: /usr/local/bin/slurm_jwt_validator.py
    owner: root
    group: root
    mode: '0755'
  tags:
  - jwt
  - tools
- name: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è JWT"
  copy:
    dest: /etc/slurm/jwt.conf
    content: |
      # Slurm JWT Configuration
      # Generated by Ansible
      # JWT Key file path
      JWT_KEY_FILE={{jwt_options.key_file}}
      # JWKS file path (for key rotation)
      JWKS_FILE={{jwt_options.jwks_file}}
      # JWT Algorithm
      JWT_ALGORITHM={{jwt_options.algorithm}}
      # Default token expiration (in seconds)
      DEFAULT_EXPIRY=3600
      # Maximum token expiration (in seconds)
      MAX_EXPIRY=86400
      # Issuer identification
      JWT_ISSUER={{slurmctld_options.cluster_name}}
      # Audience (who can use these tokens)
      JWT_AUDIENCE=slurm-cluster
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: '0600'
  tags:
  - jwt
  - config
- name: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞"
  shell: |
    export JWT_KEY_FILE={{jwt_options.key_file}}
    python3 /usr/local/bin/slurm_jwt_generator.py --user test --expiry 3600
  register: jwt_test_generation
  failed_when: jwt_test_generation.rc != 0
  changed_when: false
  tags:
  - jwt
  - validation
- name: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞"
  shell: |
    export JWT_KEY_FILE={{jwt_options.key_file}}
    TOKEN=$(python3 /usr/local/bin/slurm_jwt_generator.py --user test --expiry 3600)
    echo $TOKEN | python3 /usr/local/bin/slurm_jwt_validator.py
  register: jwt_test_validation
  failed_when: jwt_test_validation.rc != 0
  changed_when: false
  tags:
  - jwt
  - validation
- name: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è JWT"
  copy:
    dest: /etc/slurm/jwt_examples.sh
    content: |
      #!/bin/bash
      # JWT Examples for Slurm
      # Set environment
      export JWT_KEY_FILE={{jwt_options.key_file}}
      echo "=== Slurm JWT Examples ==="
      echo
      # Generate token for user
      echo "1. Generate token for user 'admin' (1 hour):"
      python3 /usr/local/bin/slurm_jwt_generator.py --user admin --expiry 3600
      echo
      # Generate token for service
      echo "2. Generate token for service (24 hours):"
      python3 /usr/local/bin/slurm_jwt_generator.py --user slurm-service --expiry 86400
      echo
      # Test scontrol with JWT
      echo "3. Test scontrol with JWT:"
      TOKEN=$(python3 /usr/local/bin/slurm_jwt_generator.py --user admin --expiry 3600)
      export SLURM_JWT=$TOKEN
      {{slurm_prefix}}/bin/scontrol ping
      echo
      echo "=== End of Examples ==="
    owner: root
    group: root
    mode: '0755'
  tags:
  - jwt
  - documentation
- name: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è JWT —Å–µ—Ä–≤–∏—Å–∞"
  user:
    name: slurm-jwt
    system: true
    shell: /bin/false
    home: /var/lib/slurm-jwt
    create_home: true
    groups: "{{slurm_group}}"
    state: present
  tags:
  - jwt
  - users
- name: "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ JWT –∫–ª—é—á–∞–º –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  acl:
    path: "{{jwt_options.key_file}}"
    entity: slurm-jwt
    etype: user
    permissions: r
    state: present
  tags:
  - jwt
  - security
- name: "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥—Ä–æ—Ç–µ–π—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è JWT –ª–æ–≥–æ–≤"
  copy:
    dest: /etc/logrotate.d/slurm-jwt
    content: |
      /var/log/slurm/jwt.log {
          daily
          missingok
          rotate 30
          compress
          delaycompress
          notifempty
          create 0640 {{slurm_user}} {{slurm_group}}
   }
    owner: root
    group: root
    mode: '0644'
  tags:
  - jwt
  - logging
- name: "–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ slurm.conf"
  lineinfile:
    path: /etc/slurm/slurm.conf
    regexp: '^AuthAltTypes='
    line: 'AuthAltTypes=auth/jwt'
    state: present
    backup: true
  notify: restart slurmctld
  tags:
  - jwt
  - config
- name: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ JWT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ slurm.conf"
  lineinfile:
    path: /etc/slurm/slurm.conf
    regexp: '^AuthAltParameters='
    line: 'AuthAltParameters=jwt_key={{jwt_options.key_file}}'
    state: present
    backup: true
  notify: restart slurmctld
  tags:
  - jwt
  - config
- name: "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"
  debug:
    msg:
    - "‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    - "üîê –ö–ª—é—á: {{jwt_options.key_file}}"
    - "üîÑ JWKS: {{jwt_options.jwks_file}}"
    - "‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º: {{jwt_options.algorithm}}"
    - "üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤: /usr/local/bin/slurm_jwt_generator.py"
    - "‚úîÔ∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤: /usr/local/bin/slurm_jwt_validator.py"
    - "üìñ –ü—Ä–∏–º–µ—Ä—ã: /etc/slurm/jwt_examples.sh"
    - "üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {{'PASSED' if jwt_test_generation.rc == 0 else 'FAILED'}}"
    - "üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {{'PASSED' if jwt_test_validation.rc == 0 else 'FAILED'}}"
  tags:
  - jwt
  - info
- name: "–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ JWT"
  copy:
    dest: /etc/slurm/JWT_README.md
    content: |
      # Slurm JWT Authentication
      ## Overview
      JWT (JSON Web Token) authentication is configured for this Slurm cluster to enable secure API access.
      ## Files
      - `{{jwt_options.key_file}}` - Primary JWT signing key
      - `{{jwt_options.jwks_file}}` - JWKS file for key rotation
      - `/etc/slurm/jwt.conf` - JWT configuration
      ## Tools
      - `/usr/local/bin/slurm_jwt_generator.py` - Generate JWT tokens
      - `/usr/local/bin/slurm_jwt_validator.py` - Validate JWT tokens
      - `/etc/slurm/jwt_examples.sh` - Usage examples
      ## Usage Examples
      ### Generate a token for user 'admin' (1 hour expiry):
      ```bash
      python3 /usr/local/bin/slurm_jwt_generator.py --user admin --expiry 3600
      ```
      ### Use token with scontrol:
      ```bash
      export SLURM_JWT=$(python3 /usr/local/bin/slurm_jwt_generator.py --user admin --expiry 3600)
      scontrol ping
      ```
      ### Use token with slurmrestd:
      ```bash
      TOKEN=$(python3 /usr/local/bin/slurm_jwt_generator.py --user admin --expiry 3600)
      curl -H "X-SLURM-USER-NAME: admin" -H "X-SLURM-USER-TOKEN: $TOKEN" \
           http://{{inventory_hostname}}:{{slurmrestd_options.port}}/slurm/v0.0.42/ping
      ```
      ## Security Notes
      - JWT keys are stored with restricted permissions (600)
      - Only slurm user and slurm-jwt service user have access
      - Tokens have configurable expiry times
      - Use JWKS for key rotation without service restart
      ## Troubleshooting
      - Check `/var/log/slurm/slurmctld.log` for JWT authentication errors
      - Verify key file permissions and ownership
      - Test token generation and validation scripts
    owner: "{{slurm_user}}"
    group: "{{slurm_group}}"
    mode: '0644'
  tags:
  - jwt
  - documentation
